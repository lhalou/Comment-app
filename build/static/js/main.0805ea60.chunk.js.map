{"version":3,"sources":["CommentInput.js","Comment.js","CommentList.js","CommentApp.js","index.js"],"names":["CommentInput","state","username","content","this","_loadUsername","localStorage","setItem","getItem","setState","e","target","value","_saveUsername","props","onSubmit","createdTime","Date","textarea","focus","className","onBlur","handleUsernameBlur","bind","onChange","handleUsernameChange","ref","handleContentChange","onClick","handleSubmit","Component","Comment","timeString","_updateTimeString","timer","setInterval","clearInterval","comment","duration","now","Math","round","max","replace","onDeleteComment","index","dangerouslySetInnerHTML","__html","_getProcessedContent","handleDeleteComment","CommentList","comments","map","i","key","defaultProps","CommentApp","_loadComments","JSON","parse","stringify","alert","push","_saveComments","splice","handleSubmitComment","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0805ea60.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass CommentInput extends Component {\r\n  static propTypes = {\r\n    onSubmit: PropTypes.func,\r\n  };\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      username: \"\",\r\n      content: \"\",\r\n    };\r\n  }\r\n  componentWillMount() {\r\n    this._loadUsername();\r\n  }\r\n  _saveUsername(username) {\r\n    localStorage.setItem(\"username\", username);\r\n  }\r\n\r\n  _loadUsername() {\r\n    const username = localStorage.getItem(\"username\");\r\n    if (username) {\r\n      this.setState({ username });\r\n    }\r\n  }\r\n  handleUsernameChange(e) {\r\n    this.setState({\r\n      username: e.target.value,\r\n    });\r\n  }\r\n  handleContentChange(e) {\r\n    this.setState({\r\n      content: e.target.value,\r\n    });\r\n  }\r\n  handleUsernameBlur(e) {\r\n    //e.target.value 为输入的信息\r\n    this._saveUsername(e.target.value);\r\n  }\r\n  handleSubmit() {\r\n    if (this.props.onSubmit) {\r\n      this.props.onSubmit({\r\n        username: this.state.username,\r\n        content: this.state.content,\r\n        createdTime: +new Date(),\r\n      });\r\n    }\r\n    this.setState({ content: \"\" });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.textarea.focus();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"comment-input\">\r\n        <div className=\"comment-field\">\r\n          <span className=\"comment-field-name\">用户名</span>\r\n          <div className=\"comment-field-input\">\r\n            <input\r\n              value={this.state.username}\r\n              onBlur={this.handleUsernameBlur.bind(this)}\r\n              onChange={this.handleUsernameChange.bind(this)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"comment-field\">\r\n          <span className=\"comment-field-name\">评论内容</span>\r\n          <div className=\"comment-field-input\">\r\n            <textarea\r\n              ref={(textarea) => (this.textarea = textarea)}\r\n              value={this.state.content}\r\n              onChange={this.handleContentChange.bind(this)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"comment-field-button\">\r\n          <button onClick={this.handleSubmit.bind(this)}>提交</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default CommentInput;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nclass Comment extends Component {\r\n  static propTypes = {\r\n    comment: PropTypes.object.isRequired,\r\n    onDeleteComment: PropTypes.func,\r\n    index: PropTypes.number, // 元素下标\r\n  };\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      timeString: \"\",\r\n    };\r\n  }\r\n  componentWillMount() {\r\n    this._updateTimeString();\r\n    this.timer = setInterval(this._updateTimeString.bind(this), 5000);\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n  }\r\n  _updateTimeString() {\r\n    const comment = this.props.comment;\r\n    const duration = (+Date.now() - comment.createdTime) / 1000;\r\n    this.setState({\r\n      timeString:\r\n        duration > 60\r\n          ? `${Math.round(duration / 60)}分钟前`\r\n          : `${Math.round(Math.max(duration, 1))}秒前`,\r\n    });\r\n  }\r\n  //主要防止XSS攻击\r\n  _getProcessedContent(content) {\r\n    return content\r\n      .replace(/&/g, \"&amp;\")\r\n      .replace(/</g, \"&lt;\")\r\n      .replace(/>/g, \"&gt;\")\r\n      .replace(/\"/g, \"&quot;\")\r\n      .replace(/'/g, \"&#039;\")\r\n      .replace(/`([\\S\\s]+?)`/g, \"<code>$1</code>\");\r\n  }\r\n  handleDeleteComment() {\r\n    if (this.props.onDeleteComment) {\r\n      this.props.onDeleteComment(this.props.index);\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"comment\">\r\n        <div className=\"comment-user\">\r\n          <span className=\"comment-username\">\r\n            {this.props.comment.username}\r\n          </span>\r\n        </div>\r\n        <p\r\n          dangerouslySetInnerHTML={{\r\n            __html: this._getProcessedContent(this.props.comment.content),\r\n          }}\r\n        />\r\n        <span className=\"comment-createdtime\">{this.state.timeString}</span>\r\n        <span\r\n          onClick={this.handleDeleteComment.bind(this)}\r\n          className=\"comment-delete\"\r\n        >\r\n          删除\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Comment;\r\n","import React, { Component } from \"react\";\r\nimport Comment from \"./Comment.js\";\r\nimport PropTypes from \"prop-types\";\r\nclass CommentList extends Component {\r\n  static propTypes = {\r\n    comments: PropTypes.array,\r\n    onDeleteComment: PropTypes.func,\r\n  };\r\n  static defaultProps = {\r\n    comments: [],\r\n  };\r\n  handleDeleteComment(index) {\r\n    if (this.props.onDeleteComment) {\r\n      this.props.onDeleteComment(index);\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"comment-list\">\r\n        {this.props.comments.map((comment, i) => (\r\n          <Comment\r\n            comment={comment}\r\n            key={i}\r\n            index={i}\r\n            onDeleteComment={this.handleDeleteComment.bind(this)}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default CommentList;\r\n","import React, { Component } from \"react\";\r\nimport CommentInput from \"./CommentInput.js\";\r\nimport CommentList from \"./CommentList.js\";\r\n\r\nclass CommentApp extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      comments: [],\r\n    };\r\n  }\r\n  componentWillMount() {\r\n    this._loadComments();\r\n  }\r\n  _loadComments() {\r\n    let comments = localStorage.getItem(\"comments\");\r\n    if (comments) {\r\n      comments = JSON.parse(comments);\r\n      this.setState({\r\n        comments,\r\n      });\r\n    }\r\n  }\r\n  _saveComments(comments) {\r\n    localStorage.setItem(\"comments\", JSON.stringify(comments));\r\n  }\r\n  handleSubmitComment(comment) {\r\n    if (!comment) return;\r\n    if (!comment.username) return alert(\"请输入用户名\");\r\n    if (!comment.content) return alert(\"请输入评论内容\");\r\n    const comments = this.state.comments;\r\n    comments.push(comment);\r\n    this.setState({ comments });\r\n    this._saveComments(comments);\r\n  }\r\n  handleDeleteComment(index) {\r\n    const comments = this.state.comments;\r\n    comments.splice(index, 1);\r\n    this.setState({ comments });\r\n    this._saveComments(comments);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <CommentInput onSubmit={this.handleSubmitComment.bind(this)} />\r\n        <CommentList\r\n          comments={this.state.comments}\r\n          onDeleteComment={this.handleDeleteComment.bind(this)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default CommentApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CommentApp from \"./CommentApp\";\nimport \"./index.css\";\n\nReactDOM.render(<CommentApp />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}